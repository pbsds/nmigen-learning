import "/nmigen_boards.icebreaker/ICEBreakerPlatform"
import "/nmigen_dg/*"
import "modules/blinker/Blinker"
import "modules/pulser/Pulser"
import "modules/segment7/Segment7"
import "resources/pmod"

Top = subclass Elaboratable where
    elaborate = platform ~> m where with m = Module! =>
        freq = int platform.default_clk_frequency

        @ledr = platform.request "led_r"
        @ledg = platform.request "led_g"
        @seg7 = platform.request "seven_seg"

        blinker = (Submodule$ Blinker$ freq // 3 ).out
        pulser  = (Submodule$ Pulser$  freq // 10).out
        seg7    = Submodule$ Segment7!

        Comb$ Drive @ledr blinker

        ff = Signal 1 reset: 1
        When pulser $ ->
            Sync$ Drive ff ~ff

        Comb$ Drive @ledg ff

        counter = Signal 8
        Comb$ Drive seg7.number counter
        Comb$ Drive @seg7 seg7.pmod

        When pulser $ ->
            Sync$ Drive ff ~ff
            Sync$ Drive counter (counter + 1)



if __name__ == "__main__" =>
    plat = ICEBreakerPlatform!
    plat.add_resources$ pmod.seven_seg   pmod: 0 # pmod 1a
    plat.add_resources$ pmod.dip_switch8 pmod: 1 # pmod 1b
    plat.build Top! do_program: True
